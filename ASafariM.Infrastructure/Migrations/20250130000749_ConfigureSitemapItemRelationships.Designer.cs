// <auto-generated />
using System;
using ASafariM.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ASafariM.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250130000749_ConfigureSitemapItemRelationships")]
    partial class ConfigureSitemapItemRelationships
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ASafariM.Domain.Entities.AccessibilityPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("EnableHighContrastMode")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EnableScreenReaderSupport")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("TextScalingFactor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AccessibilityPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("IsoCode3")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NativeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("IsoCode")
                        .IsUnique();

                    b.HasIndex("IsoCode3")
                        .IsUnique();

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("32a1f34a-eb18-49b3-a67e-442b5d0f246b"),
                            CreatedAt = new DateTime(2025, 1, 30, 0, 7, 48, 786, DateTimeKind.Utc).AddTicks(3017),
                            IsActive = true,
                            IsoCode = "BE",
                            IsoCode3 = "BEL",
                            Name = "Belgium",
                            NativeName = "België",
                            PhoneCode = "+32"
                        },
                        new
                        {
                            Id = new Guid("91f0b59e-b285-47e0-be82-02d0946d5d91"),
                            CreatedAt = new DateTime(2025, 1, 30, 0, 7, 48, 786, DateTimeKind.Utc).AddTicks(3020),
                            IsActive = true,
                            IsoCode = "FR",
                            IsoCode3 = "FRA",
                            Name = "France",
                            NativeName = "France",
                            PhoneCode = "+33"
                        },
                        new
                        {
                            Id = new Guid("0a31df74-d323-4f2e-ae4c-eee2d69d97d3"),
                            CreatedAt = new DateTime(2025, 1, 30, 0, 7, 48, 786, DateTimeKind.Utc).AddTicks(3022),
                            IsActive = true,
                            IsoCode = "DE",
                            IsoCode3 = "DEU",
                            Name = "Germany",
                            NativeName = "Deutschland",
                            PhoneCode = "+49"
                        },
                        new
                        {
                            Id = new Guid("8befcafa-f71e-4186-b791-0c3d7c7de584"),
                            CreatedAt = new DateTime(2025, 1, 30, 0, 7, 48, 786, DateTimeKind.Utc).AddTicks(3024),
                            IsActive = true,
                            IsoCode = "NL",
                            IsoCode3 = "NLD",
                            Name = "Netherlands",
                            NativeName = "Nederland",
                            PhoneCode = "+31"
                        },
                        new
                        {
                            Id = new Guid("06c39fd6-b19e-4b0b-8038-2c05cb955b2b"),
                            CreatedAt = new DateTime(2025, 1, 30, 0, 7, 48, 786, DateTimeKind.Utc).AddTicks(3026),
                            IsActive = true,
                            IsoCode = "GB",
                            IsoCode3 = "GBR",
                            Name = "United Kingdom",
                            NativeName = "United Kingdom",
                            PhoneCode = "+44"
                        },
                        new
                        {
                            Id = new Guid("f080f360-ab57-45e3-9071-21a166192759"),
                            CreatedAt = new DateTime(2025, 1, 30, 0, 7, 48, 786, DateTimeKind.Utc).AddTicks(3028),
                            IsActive = true,
                            IsoCode = "IT",
                            IsoCode3 = "ITA",
                            Name = "Italy",
                            NativeName = "Italia",
                            PhoneCode = "+39"
                        },
                        new
                        {
                            Id = new Guid("e0558e0c-ace9-43b2-bd0e-8361acabd029"),
                            CreatedAt = new DateTime(2025, 1, 30, 0, 7, 48, 786, DateTimeKind.Utc).AddTicks(3030),
                            IsActive = true,
                            IsoCode = "ES",
                            IsoCode3 = "ESP",
                            Name = "Spain",
                            NativeName = "España",
                            PhoneCode = "+34"
                        },
                        new
                        {
                            Id = new Guid("b428e215-909b-4c30-a929-ac5142c1dff0"),
                            CreatedAt = new DateTime(2025, 1, 30, 0, 7, 48, 786, DateTimeKind.Utc).AddTicks(3035),
                            IsActive = true,
                            IsoCode = "CH",
                            IsoCode3 = "CHE",
                            Name = "Switzerland",
                            NativeName = "Schweiz",
                            PhoneCode = "+41"
                        },
                        new
                        {
                            Id = new Guid("16dcbcf3-0c1b-4f7a-b245-049881753c28"),
                            CreatedAt = new DateTime(2025, 1, 30, 0, 7, 48, 786, DateTimeKind.Utc).AddTicks(3037),
                            IsActive = true,
                            IsoCode = "AT",
                            IsoCode3 = "AUT",
                            Name = "Austria",
                            NativeName = "Österreich",
                            PhoneCode = "+43"
                        },
                        new
                        {
                            Id = new Guid("075896a4-0aae-4034-8fe4-11a1836b8a58"),
                            CreatedAt = new DateTime(2025, 1, 30, 0, 7, 48, 786, DateTimeKind.Utc).AddTicks(3038),
                            IsActive = true,
                            IsoCode = "LU",
                            IsoCode3 = "LUX",
                            Name = "Luxembourg",
                            NativeName = "Luxembourg",
                            PhoneCode = "+352"
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DecimalPlaces")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a81e5c05-aaee-422c-9654-20f81d483d1d"),
                            Code = "EUR",
                            CreatedAt = new DateTime(2025, 1, 30, 0, 7, 48, 786, DateTimeKind.Utc).AddTicks(2945),
                            DecimalPlaces = 2,
                            IsActive = true,
                            Name = "Euro",
                            Symbol = "€"
                        },
                        new
                        {
                            Id = new Guid("bef8c5a6-1e20-4d64-99ea-ae14b40b6c7f"),
                            Code = "USD",
                            CreatedAt = new DateTime(2025, 1, 30, 0, 7, 48, 786, DateTimeKind.Utc).AddTicks(2948),
                            DecimalPlaces = 2,
                            IsActive = true,
                            Name = "US Dollar",
                            Symbol = "$"
                        },
                        new
                        {
                            Id = new Guid("3cad0f64-4f4a-488a-a3de-ef4da85dfbaa"),
                            Code = "GBP",
                            CreatedAt = new DateTime(2025, 1, 30, 0, 7, 48, 786, DateTimeKind.Utc).AddTicks(2950),
                            DecimalPlaces = 2,
                            IsActive = true,
                            Name = "British Pound",
                            Symbol = "£"
                        },
                        new
                        {
                            Id = new Guid("2ad937eb-c0f5-485b-85d1-c6d652e05d96"),
                            Code = "CHF",
                            CreatedAt = new DateTime(2025, 1, 30, 0, 7, 48, 786, DateTimeKind.Utc).AddTicks(2952),
                            DecimalPlaces = 2,
                            IsActive = true,
                            Name = "Swiss Franc",
                            Symbol = "Fr."
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.DateFormat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Example")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Format")
                        .IsUnique();

                    b.ToTable("DateFormats");

                    b.HasData(
                        new
                        {
                            Id = new Guid("67607140-ad1b-4d9c-9bff-1d4b1c9f8bfe"),
                            CreatedAt = new DateTime(2025, 1, 30, 0, 7, 48, 786, DateTimeKind.Utc).AddTicks(2910),
                            DisplayName = "Belgian/European Date Format",
                            Example = "31/12/2024",
                            Format = "dd/MM/yyyy",
                            IsActive = true,
                            IsDefault = false
                        },
                        new
                        {
                            Id = new Guid("19423c17-9d1d-4a94-bd03-bcb3a144508e"),
                            CreatedAt = new DateTime(2025, 1, 30, 0, 7, 48, 786, DateTimeKind.Utc).AddTicks(2913),
                            DisplayName = "Belgian Date Format (Dot)",
                            Example = "31.12.2024",
                            Format = "dd.MM.yyyy",
                            IsActive = true,
                            IsDefault = false
                        },
                        new
                        {
                            Id = new Guid("0848f5c1-4032-461f-95f2-db372f5ce95e"),
                            CreatedAt = new DateTime(2025, 1, 30, 0, 7, 48, 786, DateTimeKind.Utc).AddTicks(2915),
                            DisplayName = "US Date Format",
                            Example = "12/31/2024",
                            Format = "MM/dd/yyyy",
                            IsActive = true,
                            IsDefault = false
                        },
                        new
                        {
                            Id = new Guid("796739f3-35f7-41f7-af89-14d1a5dfcb7e"),
                            CreatedAt = new DateTime(2025, 1, 30, 0, 7, 48, 786, DateTimeKind.Utc).AddTicks(2917),
                            DisplayName = "ISO Date Format",
                            Example = "2024-12-31",
                            Format = "yyyy-MM-dd",
                            IsActive = true,
                            IsDefault = false
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.FileFormat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaxSizeInMB")
                        .HasColumnType("int");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("SupportsAnnotations")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SupportsEditing")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Extension")
                        .IsUnique();

                    b.HasIndex("MimeType")
                        .IsUnique();

                    b.ToTable("FileFormats");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eea12633-8982-415a-a811-e91f71e8efe8"),
                            CreatedAt = new DateTime(2025, 1, 30, 0, 7, 48, 786, DateTimeKind.Utc).AddTicks(2839),
                            Description = "Simple text document format",
                            Extension = ".txt",
                            IsActive = true,
                            IsDefault = false,
                            MaxSizeInMB = 10,
                            MimeType = "text/plain",
                            Name = "Plain Text",
                            SupportsAnnotations = true,
                            SupportsEditing = false
                        },
                        new
                        {
                            Id = new Guid("a5e68865-6f97-4233-bd72-4bb7a83b988b"),
                            CreatedAt = new DateTime(2025, 1, 30, 0, 7, 48, 786, DateTimeKind.Utc).AddTicks(2846),
                            Description = "TypeScript source code file",
                            Extension = ".ts",
                            IsActive = true,
                            IsDefault = false,
                            MaxSizeInMB = 10,
                            MimeType = "application/typescript",
                            Name = "TypeScript",
                            SupportsAnnotations = true,
                            SupportsEditing = false
                        },
                        new
                        {
                            Id = new Guid("3a4ed5d3-8a8a-4a32-8452-94cb2ecdd05e"),
                            CreatedAt = new DateTime(2025, 1, 30, 0, 7, 48, 786, DateTimeKind.Utc).AddTicks(2848),
                            Description = "TypeScript React component file",
                            Extension = ".tsx",
                            IsActive = true,
                            IsDefault = false,
                            MaxSizeInMB = 10,
                            MimeType = "application/typescript+react",
                            Name = "TypeScript React",
                            SupportsAnnotations = true,
                            SupportsEditing = false
                        },
                        new
                        {
                            Id = new Guid("7690ff48-78dd-408c-8a6a-7e0d3f7b674b"),
                            CreatedAt = new DateTime(2025, 1, 30, 0, 7, 48, 786, DateTimeKind.Utc).AddTicks(2854),
                            Description = "JavaScript source code file",
                            Extension = ".js",
                            IsActive = true,
                            IsDefault = false,
                            MaxSizeInMB = 10,
                            MimeType = "application/javascript",
                            Name = "JavaScript",
                            SupportsAnnotations = true,
                            SupportsEditing = false
                        },
                        new
                        {
                            Id = new Guid("3ba0691d-c252-49f0-9cf9-abc3b9d95273"),
                            CreatedAt = new DateTime(2025, 1, 30, 0, 7, 48, 786, DateTimeKind.Utc).AddTicks(2856),
                            Description = "JavaScript Object Notation data file",
                            Extension = ".json",
                            IsActive = true,
                            IsDefault = false,
                            MaxSizeInMB = 10,
                            MimeType = "application/json",
                            Name = "JSON",
                            SupportsAnnotations = true,
                            SupportsEditing = false
                        },
                        new
                        {
                            Id = new Guid("46ca04ef-df68-46f0-a218-60d3f2a912c4"),
                            CreatedAt = new DateTime(2025, 1, 30, 0, 7, 48, 786, DateTimeKind.Utc).AddTicks(2857),
                            Description = "Markdown text format",
                            Extension = ".md",
                            IsActive = true,
                            IsDefault = false,
                            MaxSizeInMB = 10,
                            MimeType = "text/markdown",
                            Name = "Markdown",
                            SupportsAnnotations = true,
                            SupportsEditing = false
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.GeographicalPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DateFormatId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TimeZoneId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DateFormatId");

                    b.HasIndex("TimeZoneId");

                    b.ToTable("GeographicalPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.LanguagePreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LanguagePreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AuthorName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ParentMdFileId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ParentMdFileId");

                    b.HasIndex("ProjectId");

                    b.ToTable("MarkdownFiles");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFileHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ChangedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ContentSnapshot")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("MarkdownFileId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("MarkdownFileId");

                    b.ToTable("MarkdownFileHistories");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFileUser", b =>
                {
                    b.Property<Guid>("MarkdownFileId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<int>("CollaborationRole")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CollaborationStopDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateCollaborated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("MarkdownFileId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("MarkdownFileUsers");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MiscellaneousPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DefaultDashboardView")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("EnableAutoSave")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EnableRealTimeUpdates")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("FileFormatId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PaginationSettingsId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("ShowActivityTimeline")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FileFormatId");

                    b.HasIndex("PaginationSettingsId");

                    b.ToTable("MiscellaneousPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.NotificationPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("AllowMarketingEmails")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSubscribedToNewsletter")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NotificationFrequencyInHours")
                        .HasColumnType("int");

                    b.Property<bool>("ReceiveEmailNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ReceiveSmsNotifications")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("NotificationPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PaginationSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("EnableInfiniteScroll")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ItemsPerPage")
                        .HasColumnType("int");

                    b.Property<string>("PageSizeOptions")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("ShowFirstLastButtons")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowItemsCount")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowPageNumbers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowPageSizeSelector")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("VisiblePageRange")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PaginationSettings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d3d2bf12-6557-44ff-b6f3-29af32396095"),
                            CreatedAt = new DateTime(2025, 1, 30, 0, 7, 48, 786, DateTimeKind.Utc).AddTicks(2887),
                            EnableInfiniteScroll = false,
                            IsActive = true,
                            IsDefault = false,
                            ItemsPerPage = 10,
                            PageSizeOptions = "[10,20,50,100]",
                            ShowFirstLastButtons = true,
                            ShowItemsCount = true,
                            ShowPageNumbers = true,
                            ShowPageSizeSelector = true,
                            VisiblePageRange = 5
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("int");

                    b.Property<string>("Excerpt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostTag", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TagId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Preference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AccessibilityId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<Guid?>("GeographyId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("LanguageId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("MiscellaneousId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("NotificationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PrivacyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ThemeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AccessibilityId");

                    b.HasIndex("GeographyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MiscellaneousId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("PrivacyId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Preferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PrivacyPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("AllowDataSharing")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowSearchByEmail")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("EnableTwoFactorAuthentication")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsProfilePublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("PrivacyPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.ProgressHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double?>("ActualCost")
                        .HasColumnType("double");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("BudgetVariance")
                        .HasColumnType("double");

                    b.Property<int>("CompletedMilestones")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<int>("CurrentStatus")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("MitigationPlan")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<double?>("PlannedBudget")
                        .HasColumnType("double");

                    b.Property<DateTime?>("PlannedEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("PlannedStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProgressPercentage")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<string>("RiskDescription")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("RiskLevel")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StatusReason")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("TimeVarianceInDays")
                        .HasColumnType("int");

                    b.Property<int>("TotalMilestones")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("ProgressHistories");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double?>("ActualBudget")
                        .HasColumnType("double");

                    b.Property<double?>("Budget")
                        .HasColumnType("double");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("IsCancelledAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("IsCancelledby")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("IsCompletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("IsCompletedBy")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsExtended")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("IsExtendedTo")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsPaused")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("IsPausedTo")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("MarkdownFileId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("char(36)");

                    b.Property<double?>("RemainingBudget")
                        .HasColumnType("double");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MarkdownFileId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.ProjectMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<int>("ProjectMemberType")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectMembers");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9514455f-ca2d-48dd-bfc2-faa8350410ba"),
                            Description = "Admin role has full administrative privileges, except for application management.",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("a05dfeb9-04be-4a12-a40f-3901917d2beb"),
                            Description = "Manages user interactions and content moderation. They can create and manage their own tasks, projects, and content, and can edit other public articles than their own.",
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = new Guid("68ab3a93-84ad-4869-8231-affad9912cf1"),
                            Description = "User role with limited privileges. A user can create and manage their own tasks, projects, and content, and cannot edit other public articles than their own.",
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("c9897771-7e4c-48d7-afbf-4d2a86862eca"),
                            Description = "Guest role is the least privileged role. They can only view public articles.",
                            Name = "Guest"
                        },
                        new
                        {
                            Id = new Guid("34519611-79ce-409b-942e-a96ca64b5d97"),
                            Description = "Focuses on content creation and management without full administrative privileges. They can create and manage their own articles, but cannot edit other public articles than their own.",
                            Name = "Editor"
                        },
                        new
                        {
                            Id = new Guid("1b4a568a-9141-4cdb-b1bc-233046767fd7"),
                            Description = "Has full control over the application and can manage all aspects.",
                            Name = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.SitemapItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessByRole")
                        .HasColumnType("int");

                    b.Property<string>("ArchivedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ExternalLink")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsExternalLink")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUnpublished")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ParentItemId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PublishedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("SitemapItemId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UnpublishBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UnpublishDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ParentItemId");

                    b.HasIndex("SitemapItemId");

                    b.ToTable("SitemapItems");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.ThemePreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccentColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FontSize")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDarkTheme")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("ThemePreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.TimeZone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DstOffset")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StandardName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("UsesDaylightSaving")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UtcOffset")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.HasKey("Id");

                    b.HasIndex("StandardName")
                        .IsUnique();

                    b.ToTable("TimeZones");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea7ef0bb-ce54-4707-93b4-30c8641605ed"),
                            CreatedAt = new DateTime(2025, 1, 30, 0, 7, 48, 786, DateTimeKind.Utc).AddTicks(2981),
                            DstOffset = "+02:00",
                            IsActive = true,
                            Name = "CET",
                            StandardName = "Central European Time (Belgium)",
                            UsesDaylightSaving = true,
                            UtcOffset = "+01:00"
                        },
                        new
                        {
                            Id = new Guid("359b6e4f-f832-45f2-b98c-2fe1784bb3b9"),
                            CreatedAt = new DateTime(2025, 1, 30, 0, 7, 48, 786, DateTimeKind.Utc).AddTicks(2984),
                            DstOffset = "+02:00",
                            IsActive = true,
                            Name = "CEST",
                            StandardName = "Central European Summer Time",
                            UsesDaylightSaving = true,
                            UtcOffset = "+02:00"
                        },
                        new
                        {
                            Id = new Guid("b0fcdb72-a2c7-47e4-8fa9-4a23e3c6e20a"),
                            CreatedAt = new DateTime(2025, 1, 30, 0, 7, 48, 786, DateTimeKind.Utc).AddTicks(2986),
                            DstOffset = "+02:00",
                            IsActive = true,
                            Name = "UTC",
                            StandardName = "Coordinated Universal Time",
                            UsesDaylightSaving = true,
                            UtcOffset = "+00:00"
                        },
                        new
                        {
                            Id = new Guid("ba20b8b2-2040-4f6e-9592-2f96aa8559dd"),
                            CreatedAt = new DateTime(2025, 1, 30, 0, 7, 48, 786, DateTimeKind.Utc).AddTicks(2988),
                            DstOffset = "+01:00",
                            IsActive = true,
                            Name = "WET",
                            StandardName = "Western European Time",
                            UsesDaylightSaving = true,
                            UtcOffset = "+00:00"
                        },
                        new
                        {
                            Id = new Guid("9552ad10-6e3b-440b-a86c-bd5ce8fa84cb"),
                            CreatedAt = new DateTime(2025, 1, 30, 0, 7, 48, 786, DateTimeKind.Utc).AddTicks(2992),
                            DstOffset = "+03:00",
                            IsActive = true,
                            Name = "EET",
                            StandardName = "Eastern European Time",
                            UsesDaylightSaving = true,
                            UtcOffset = "+02:00"
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ParentTopicId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ParentTopicId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Biography")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsLockedOut")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PenName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("longtext");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Website")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("PreferenceId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PreferenceId");

                    b.HasIndex("UserId", "PreferenceId")
                        .IsUnique();

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("SitemapItemTopic", b =>
                {
                    b.Property<Guid>("SitemapItemId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TopicsId")
                        .HasColumnType("char(36)");

                    b.HasKey("SitemapItemId", "TopicsId");

                    b.HasIndex("TopicsId");

                    b.ToTable("SitemapItemTopic");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.GeographicalPreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Country", "Country")
                        .WithMany("GeographicalPreferences")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.DateFormat", "DateFormat")
                        .WithMany("GeographicalPreferences")
                        .HasForeignKey("DateFormatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.TimeZone", "TimeZone")
                        .WithMany("GeographicalPreferences")
                        .HasForeignKey("TimeZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Currency");

                    b.Navigation("DateFormat");

                    b.Navigation("TimeZone");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFile", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.User", null)
                        .WithMany("AuthoredMarkdownFiles")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.MarkdownFile", "ParentMdFile")
                        .WithMany()
                        .HasForeignKey("ParentMdFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ASafariM.Domain.Entities.Project", "Project")
                        .WithMany("MarkdownFiles")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ParentMdFile");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFileHistory", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.MarkdownFile", "MarkdownFile")
                        .WithMany("History")
                        .HasForeignKey("MarkdownFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarkdownFile");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFileUser", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.MarkdownFile", "MarkdownFile")
                        .WithMany("MarkdownFileUsers")
                        .HasForeignKey("MarkdownFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany("MarkdownFileUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarkdownFile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MiscellaneousPreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.FileFormat", "FileFormat")
                        .WithMany("MiscellaneousPreferences")
                        .HasForeignKey("FileFormatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.PaginationSettings", "PaginationSettings")
                        .WithMany("MiscellaneousPreferences")
                        .HasForeignKey("PaginationSettingsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FileFormat");

                    b.Navigation("PaginationSettings");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Post", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Topic", "Topic")
                        .WithMany("Posts")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostTag", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Preference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.AccessibilityPreference", "Accessibility")
                        .WithMany()
                        .HasForeignKey("AccessibilityId");

                    b.HasOne("ASafariM.Domain.Entities.GeographicalPreference", "Geography")
                        .WithMany()
                        .HasForeignKey("GeographyId");

                    b.HasOne("ASafariM.Domain.Entities.LanguagePreference", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("ASafariM.Domain.Entities.MiscellaneousPreference", "Miscellaneous")
                        .WithMany()
                        .HasForeignKey("MiscellaneousId");

                    b.HasOne("ASafariM.Domain.Entities.NotificationPreference", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId");

                    b.HasOne("ASafariM.Domain.Entities.PrivacyPreference", "Privacy")
                        .WithMany()
                        .HasForeignKey("PrivacyId");

                    b.HasOne("ASafariM.Domain.Entities.ThemePreference", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");

                    b.Navigation("Accessibility");

                    b.Navigation("Geography");

                    b.Navigation("Language");

                    b.Navigation("Miscellaneous");

                    b.Navigation("Notification");

                    b.Navigation("Privacy");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.ProgressHistory", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Project", "Project")
                        .WithOne("Progress")
                        .HasForeignKey("ASafariM.Domain.Entities.ProgressHistory", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Project", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.MarkdownFile", null)
                        .WithMany("Projects")
                        .HasForeignKey("MarkdownFileId");

                    b.HasOne("ASafariM.Domain.Entities.User", "Owner")
                        .WithMany("OwnedProjects")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", null)
                        .WithMany("ManagedProjects")
                        .HasForeignKey("UserId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.ProjectMember", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Project", "Project")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany("ProjectMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.SitemapItem", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.SitemapItem", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ASafariM.Domain.Entities.SitemapItem", null)
                        .WithMany("ChildItems")
                        .HasForeignKey("SitemapItemId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.ThemePreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.LanguagePreference", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Topic", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Topic", "ParentTopic")
                        .WithMany("ChildTopics")
                        .HasForeignKey("ParentTopicId");

                    b.Navigation("ParentTopic");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserPreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Preference", "Preference")
                        .WithMany("UserPreferences")
                        .HasForeignKey("PreferenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany("Preferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Preference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SitemapItemTopic", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.SitemapItem", null)
                        .WithMany()
                        .HasForeignKey("SitemapItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Topic", null)
                        .WithMany()
                        .HasForeignKey("TopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Country", b =>
                {
                    b.Navigation("GeographicalPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.DateFormat", b =>
                {
                    b.Navigation("GeographicalPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.FileFormat", b =>
                {
                    b.Navigation("MiscellaneousPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFile", b =>
                {
                    b.Navigation("History");

                    b.Navigation("MarkdownFileUsers");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PaginationSettings", b =>
                {
                    b.Navigation("MiscellaneousPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Post", b =>
                {
                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Preference", b =>
                {
                    b.Navigation("UserPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Project", b =>
                {
                    b.Navigation("MarkdownFiles");

                    b.Navigation("Progress");

                    b.Navigation("ProjectMembers");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.SitemapItem", b =>
                {
                    b.Navigation("ChildItems");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Tag", b =>
                {
                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.TimeZone", b =>
                {
                    b.Navigation("GeographicalPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Topic", b =>
                {
                    b.Navigation("ChildTopics");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.User", b =>
                {
                    b.Navigation("AuthoredMarkdownFiles");

                    b.Navigation("ManagedProjects");

                    b.Navigation("MarkdownFileUsers");

                    b.Navigation("OwnedProjects");

                    b.Navigation("Preferences");

                    b.Navigation("ProjectMemberships");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
